server {
	listen 8080;
	server_name _;
	root /usr/share/nginx/html;
	access_log off;
	location / {
		return 500;
	}
	location ~ ^/(status|ping)$ {
		allow 127.0.0.1;
		deny all;
		include fastcgi_params;
		fastcgi_param SCRIPT_FILENAME $fastcgi_script_name;
		fastcgi_pass unix:/sock/php-fpm.sock;
	}
}

server {
	listen 80;
	listen [::]:80;

	server_name ZABBIX_SERVER_NAME;

	# SSL configuration
	#
	# listen 443 ssl default_server;
	# listen [::]:443 ssl default_server;
	#
	# Note: You should disable gzip for SSL traffic.
	# See: https://bugs.debian.org/773332
	#
	# Read up on ssl_ciphers to ensure a secure configuration.
	# See: https://bugs.debian.org/765782
	#
	# Self signed certs generated by the ssl-cert package
	# Don't use them in a production server!
	#
	# include snippets/snakeoil.conf;

	server_tokens off;

	root /usr/share/nginx/html;

	index index.html index.htm index.nginx-debian.html;

	location ~ /.well-known/acme-challenge {
		allow all;
		root /var/www/html;
	}

	location / {
		# First attempt to serve request as file, then
		# as directory, then fall back to displaying a 404.
		try_files $uri $uri/ =404;
	}

	# pass PHP scripts to FastCGI server
	#
	#location ~ \.php$ {
	#	include snippets/fastcgi-php.conf;
	#
	#	# With php-fpm (or other unix sockets):
	#	fastcgi_pass unix:/sock/php-fpm.sock;
	#	# With php-cgi (or other tcp sockets):
	#	fastcgi_pass 127.0.0.1:9000;
	#}

	# deny access to .htaccess files, if Apache's document root
	# concurs with nginx's one
	#
	#location ~ /\.ht {
	#	deny all;
	#}
}

server {
	listen 443 ssl http2;
	listen [::]:443 ssl http2;

	server_name ZABBIX_SERVER_NAME;

	# SSL configuration
	#
	# listen 443 ssl default_server;
	# listen [::]:443 ssl default_server;
	#
	# Note: You should disable gzip for SSL traffic.
	# See: https://bugs.debian.org/773332
	#
	# Read up on ssl_ciphers to ensure a secure configuration.
	# See: https://bugs.debian.org/765782
	#
	# Self signed certs generated by the ssl-cert package
	# Don't use them in a production server!
	#
	# include snippets/snakeoil.conf;

	# We can't use variables in ssl_certificate because variables get evaluated later than the privileges drop
	# so we would get "system library:fopen:Permission denied":
	#ssl_certificate /etc/letsencrypt/live/$server_name/fullchain.pem;
        #ssl_certificate_key /etc/letsencrypt/live/$server_name/privkey.pem;

	ssl_certificate /etc/letsencrypt/live/ZABBIX_SERVER_NAME/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/ZABBIX_SERVER_NAME/privkey.pem;

	include snippets/options-ssl-nginx.conf;

	###add_header X-Frame-Options "SAMEORIGIN" always;
        ###add_header X-XSS-Protection "1; mode=block" always;
        ###add_header X-Content-Type-Options "nosniff" always;
        ###add_header Referrer-Policy "no-referrer-when-downgrade" always;
        ###add_header Content-Security-Policy "default-src * data: 'unsafe-eval' 'unsafe-inline'" always;
        # add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        # enable strict transport security only if you understand the implications

	server_tokens off;

	root /var/www/html;

	# Add index.php to the list if you are using PHP
	index index.php index.html index.htm index.nginx-debian.html;

	location / {
		# First attempt to serve request as file, then
		# as directory, then fall back to displaying a 404.
		try_files $uri $uri/ =404;
	}

	# pass PHP scripts to FastCGI server
	#
	location ~ \.php$ {
		include snippets/fastcgi-php.conf;
	
		# With php-fpm (or other unix sockets):
		fastcgi_pass unix:/sock/php-fpm.sock;
	#	# With php-cgi (or other tcp sockets):
	#	fastcgi_pass 127.0.0.1:9000;
	}

	# deny access to .htaccess files, if Apache's document root
	# concurs with nginx's one
	#
	#location ~ /\.ht {
	#	deny all;
	#}
}

